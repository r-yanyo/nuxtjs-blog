{
  "title": "JavaScriptのクロージャについて",
  "date": "2018年03月17日",
  "tags": [
    "JavaScript"
  ],
  "bodyContent": "## クロージャとは\n> クロージャは、独立した (自由な) 変数を参照する関数です。言い換えるとクロージャ内で定義された関数は、自身が作成された環境を覚えています\n\n[MDN web doc](https://developer.mozilla.org/ja/docs/Web/JavaScript/Closures)より\n\n<br>\n関数を実行するたびに変数をincrementする関数を作るとすると、一般的には以下のようにグローバル変数が必要になる。\n\n### 実行するたびcntを１増やす\n```js\nlet cnt = 0;\n\nfunction g(){\n  cnt ++;\n}\n\nconsole.log(cnt);\ng();\nconsole.log(cnt);\n```\n\n### 実行結果\n```\n0\n1\n```\n<br>\nグローバル変数を使わないで書こうとすると以下のように失敗する。\n\n### 実行するたびcntを１増やしたい(失敗)\n```js\nfunction h(){\n  var cnt = 0;\n  console.log(cnt);\n  cnt++;\n}\n\nh();\nh();\n```\n\n### 実行結果\n```\n0\n0\n```\n\n<br>\nしかし、クロージャを利用することでグローバル変数を使わずに実現出来る。当然変数nは外から参照出来ない。\n\n### クロージャを利用した例\n```js\nfunction f(){\n  let n = 0;\n  return {\n    show : function(){\n      console.log('n is ' + n);\n    },\n    inc : function(){\n      n ++;\n    }\n  }\n}\n\nconst count = f();\n\ncount.show();\ncount.inc();\ncount.show();\nconsole.log(count.n);\n\n```\n\n### 実行結果\n\n```\nn is 0\nn is 1\nundefined\n```\n\n## クロージャを使う利点\nオブジェクト指向で言う、外部から見えない**プライベートな変数**を作ることが出来る。これによりグローバル変数を使わなくては実現出来なかった処理を、グローバル変数無しで実現出来る。",
  "bodyHtml": "<h2>クロージャとは</h2>\n<blockquote>\n<p>クロージャは、独立した (自由な) 変数を参照する関数です。言い換えるとクロージャ内で定義された関数は、自身が作成された環境を覚えています</p>\n</blockquote>\n<p><a href=\"https://developer.mozilla.org/ja/docs/Web/JavaScript/Closures\">MDN web doc</a>より</p>\n<br>\n関数を実行するたびに変数をincrementする関数を作るとすると、一般的には以下のようにグローバル変数が必要になる。\n<h3>実行するたびcntを１増やす</h3>\n<pre><code class=\"hljs\"><span class=\"hljs-keyword\">let</span> cnt = <span class=\"hljs-number\">0</span>;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">g</span>(<span class=\"hljs-params\"></span>)</span>{\n  cnt ++;\n}\n\n<span class=\"hljs-built_in\">console</span>.log(cnt);\ng();\n<span class=\"hljs-built_in\">console</span>.log(cnt);</code></pre><h3>実行結果</h3>\n<pre><code>0\n1\n</code></pre>\n<br>\nグローバル変数を使わないで書こうとすると以下のように失敗する。\n<h3>実行するたびcntを１増やしたい(失敗)</h3>\n<pre><code class=\"hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">h</span>(<span class=\"hljs-params\"></span>)</span>{\n  <span class=\"hljs-keyword\">var</span> cnt = <span class=\"hljs-number\">0</span>;\n  <span class=\"hljs-built_in\">console</span>.log(cnt);\n  cnt++;\n}\n\nh();\nh();</code></pre><h3>実行結果</h3>\n<pre><code>0\n0\n</code></pre>\n<br>\nしかし、クロージャを利用することでグローバル変数を使わずに実現出来る。当然変数nは外から参照出来ない。\n<h3>クロージャを利用した例</h3>\n<pre><code class=\"hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">f</span>(<span class=\"hljs-params\"></span>)</span>{\n  <span class=\"hljs-keyword\">let</span> n = <span class=\"hljs-number\">0</span>;\n  <span class=\"hljs-keyword\">return</span> {\n    <span class=\"hljs-attr\">show</span> : <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{\n      <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'n is '</span> + n);\n    },\n    <span class=\"hljs-attr\">inc</span> : <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{\n      n ++;\n    }\n  }\n}\n\n<span class=\"hljs-keyword\">const</span> count = f();\n\ncount.show();\ncount.inc();\ncount.show();\n<span class=\"hljs-built_in\">console</span>.log(count.n);</code></pre><h3>実行結果</h3>\n<pre><code>n is 0\nn is 1\nundefined\n</code></pre>\n<h2>クロージャを使う利点</h2>\n<p>オブジェクト指向で言う、外部から見えない<strong>プライベートな変数</strong>を作ることが出来る。これによりグローバル変数を使わなくては実現出来なかった処理を、グローバル変数無しで実現出来る。</p>\n",
  "preview": "クロージャとは\n> クロージャは、独立した (自由な)",
  "dir": "content/json",
  "base": "2018-03-17-closure-learning.json",
  "ext": ".json",
  "sourceBase": "2018-03-17-closure-learning.md",
  "sourceExt": ".md"
}