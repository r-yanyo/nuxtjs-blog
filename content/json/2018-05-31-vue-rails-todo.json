{
  "title": "Vue.js + Ruby on RailsでTodoリストアプリを作る。",
  "subtitle": null,
  "date": "2018年05月31日",
  "tags": [
    "Vue.js",
    "Ruby on Rails"
  ],
  "bodyContent": "# 完成図\n\n<img src=\"/images/tasks.png\">\n\n# コンセプト\n\nフロントエンドとサーバサイドを完全に分ける。よって Rails の Webpacker を用いた Vue.js の使用はしない。\n\n# 環境\n\nMac なので基本 homebrew でインストールしている。\n環境でこけるのが一番萎えるので慎重に。\n\n- Mac OS X\n- node 10.0.0\n- npm 5.6.0\n- Vue 2.9.3\n- Rails 5.1.6\n\n# 早速 Todo リストアプリ作ろう。\n\nサーバーサイドとフロントエンドを分けるので、それぞれフォルダも分かれます。\n\n## まずはサーバサイドから\n\nまずはサーバサイドから作ります。単純な CRUD 機能(Create Read Update Delete)が出来ることを目指しましょう。但し今回は Update は省略しています。\n\nAPi モードで rails new します。\n\n```\n$ rails new server --api\n```\n\nTodo リストアプリを作るので、「task」というモデルを作り、タスクを保存したり削除したり出来るようにします。タスクが持つ column は string 型の「text」だけとします。DB のマイグレーションも忘れず行う。\n\n```\n$ rails generate model task text:string\n$ rails db:migrate\n```\n\n次にコントローラーを作ります。\n\n```\n$ rails g controller api::tasks\n```\n\ntasks_controller.rb の中身を以下のようにします。\n\n```ruby :api/tasks_controller.rb\nclass Api::TasksController < ApplicationController\n  def index\n    @tasks = Task.all\n    render json: @tasks\n  end\n\n  def create\n    @task = Task.new(task_params)\n    if @task.save\n      render json: \"create new task.\\n\", status: 200\n    else\n      render json: \"fail to create.\\n\", status: 500\n    end\n  end\n\n  def destroy\n    @task = Task.find(params[:id])\n    @task.destroy\n    render json: \"destroy a task.\\n\"\n  end\n\n  private\n    def task_params\n      params.require(:task).permit(:text)\n    end\nend\n\n```\n\n最後にルーティングを設定します。\n\n```ruby :config/routes.rb\nRails.application.routes.draw do\n  namespace :api, { format: 'json' } do\n    resources :tasks\n  end\nend\n```\n\nこれによりルーティングは以下のようになります。\n\n```\n$ rake routes\n       Prefix Verb   URI Pattern                   Controller#Action\n    api_tasks GET    /api/tasks(.:format)          api/tasks#index {:format=>/json/}\n              POST   /api/tasks(.:format)          api/tasks#create {:format=>/json/}\n new_api_task GET    /api/tasks/new(.:format)      api/tasks#new {:format=>/json/}\nedit_api_task GET    /api/tasks/:id/edit(.:format) api/tasks#edit {:format=>/json/}\n     api_task GET    /api/tasks/:id(.:format)      api/tasks#show {:format=>/json/}\n              PATCH  /api/tasks/:id(.:format)      api/tasks#update {:format=>/json/}\n              PUT    /api/tasks/:id(.:format)      api/tasks#update {:format=>/json/}\n              DELETE /api/tasks/:id(.:format)      api/tasks#destroy {:format=>/json/}\n```\n\nターミナルから curl でテストしてみましょう。\n\nまず Rails サーバを立てます。\n\n```\n$ rails s\n```\n\n別ターミナルで、curl から rails サーバへリクエストを送ります。\nまずは新しいタスクを作ってみましょう。\n\n```\n$ curl http://localhost:3000/api/tasks -X POST -d 'task[text]=洗濯する'\ncreate new task.\n```\n\n次はそれを GET してみます。\n\n```\n$ curl http://localhost:3000/api/tasks\n[{\"id\":1,\"text\":\"洗濯する\",\"created_at\":\"2018-05-31T15:05:34.862Z\",\"updated_at\":\"2018-05-31T15:05:34.862Z\"}]\n```\n\n最後にそれを削除してみます。\n\n```\n$ curl http://localhost:3000/api/tasks/1 -X DELETE\ndestroy a task.\n```\n\nこれでサーバ側は（だいたい）完成です。後からちょっと修正します。\n\n## 次はフロントエンド\n\n次はフロント側を Vue.js で作っていきます。\nvue-cli で雛形を作っていきましょう。今回はテンプレとして webpack-simple を使います。\n\n```\n$ vue init webpack-simple client\n$ cd client\n$ npm install\n$ npm run dev\n```\n\nまずは GET メソッドを送ってタスクを入手できるようにしましょう。\nsrc/app.js を以下のように変更します。\n\n```js :src/app.js\n<template>\n  <div id=\"app\">\n    <ul id=\"task-list\">\n      <li class=\"task\" v-for=\"task in tasks\"><p>{{ task.text }}</p></li>\n    </ul>\n  </div>\n</template>\n\n<script>\nimport axios from 'axios';\n\nconst hostName = 'localhost:3000';\nconst path = '/api/tasks'\n\nexport default {\n  name: 'app',\n  data () {\n    return {\n      tasks: [],\n    }\n  },\n  methods: {\n    getTasks: function() {\n      axios.get(`http://${hostName}${path}`)\n        .then((response) => {\n          this.tasks = response.data;\n        })\n        .catch(function(error) {\n          console.log(error);\n        });\n    }\n  },\n  mounted: function() {\n    this.getTasks();\n  }\n}\n</script>\n\n```\n\naxios を使ってサーバにリクエストを送るので axios をインストールします。\n\n```\nnpm install axios\n```\n\naxios で異なるオリジンに対してリクエストを送ると、クロスドメイン対応と pre-flight の対応が必要になります。OPTIONS メソッドで Pre-flight というリクエストが送られます。（あまり詳しくないので[ここを参考](https://qiita.com/shimpeiws/items/0cd53ac9da3a7fd645b9)にしました。これに対応するためにサーバ側を少し変更します。\n\nまずクロスドメインに対応するために、\nrack-cors モジュールをインストールし、\n\n```\ngem 'rack-cors'\n```\n\nconfig/initializers/cors.rb を以下にようにします。\n\n```ruby :config/initializers/cors.rb\nRails.application.config.middleware.insert_before 0, Rack::Cors do\n  allow do\n    origins '*'\n\n    resource '*',\n      headers: :any,\n      methods: [:get, :post, :put, :patch, :delete, :options, :head]\n  end\nend\n```\n\nconfig/routes.rb に options リクエストが来た時のルーティングを追加します。\n\n```ruby :config/routes.rb\nmatch '*path' => 'options_request#preflight', via: :options\n```\n\ncontroller/options_request_controller.rb に以下を追加します。\n\n```ruby :controller/options_request_controller.rb\nclass OptionsRequestController < ApplicationController\n  ACCESS_CONTROL_ALLOW_METHODS = %w(GET OPTIONS).freeze\n  ACCESS_CONTROL_ALLOW_HEADERS = %w(Accept Origin Content-Type Authorization).freeze\n\n  def preflight\n    set_preflight_headers!\n    head :ok\n  end\n\n  private\n\n  def set_preflight_headers!\n    response.headers['Access-Control-Max-Age'] = ACCESS_CONTROL_MAX_AGE\n    response.headers['Access-Control-Allow-Headers'] = ACCESS_CONTROL_ALLOW_HEADERS.join(',')\n    response.headers['Access-Control-Allow-Methods'] = ACCESS_CONTROL_ALLOW_METHODS.join(',')\n  end\nend\n\n```\n\nさて、これで task をサーバから GET できるようになったと思います。\nデータは予め curl で post して下さい。\n\n次にデータを POST するために form を追加しましょう。\nform の値を newTask というデータに bind したので、data に追加します。\nform に入力した値を axios でリクエストするメソッドを methods の中に追加します。\n\nまとめると以下のコードになります。\n\n```js :src/app.js\n<template>\n  <div id=\"app\">\n    <form v-on:submit.prevent=\"postTask\">\n      <input id=\"new-task-form\" type=\"text\" v-model=\"newTask\" placeholder=\"やりたいことは...\">\n    </form>\n    <ul id=\"task-list\">\n      <li class=\"task\" v-for=\"task in tasks\"><p>{{ task.text }}</p></li>\n    </ul>\n  </div>\n</template>\n\n<script>\nimport axios from 'axios';\n\nconst hostName = 'localhost:3000';\nconst path = '/api/tasks'\n\nexport default {\n  name: 'app',\n  data () {\n    return {\n      tasks: [],\n      newTask: '',\n    }\n  },\n  methods: {\n    getTasks: function() {\n      axios.get(`http://${hostName}${path}`)\n        .then((response) => {\n          this.tasks = response.data;\n        })\n        .catch(function(error) {\n          console.log(error);\n        });\n    },\n    postTask: function() {\n      axios.post(`http://${hostName}${path}`,\n          `task[text]=${this.newTask}`\n        )\n        .then((response) => {\n          this.getTasks();\n          this.newTask = '';\n        })\n        .catch(function(error) {\n          console.log(error);\n        });\n    },\n    deleteTask: function(id) {\n      axios.delete(`http://${hostName}${path}/${id}`)\n        .then((response) => {\n          this.getTasks();\n        })\n        .catch(function(error) {\n          console.log(error);\n        });\n    }\n  },\n  mounted: function() {\n    this.getTasks();\n  }\n}\n</script>\n\n```\n\n最後に task を DELETE するためのボタンを追加し、ボタンが押された時に axios で DELETE を送るメソッドを追加します。ついでに scss でスタイリングを行うと以下のようなコードになります。\n\n```js :src/app.js\n<template>\n  <div id=\"app\">\n    <form v-on:submit.prevent=\"postTask\">\n      <input id=\"new-task-form\" type=\"text\" v-model=\"newTask\" placeholder=\"やりたいことは...\">\n    </form>\n    <ul id=\"task-list\">\n      <li class=\"task\" v-for=\"task in tasks\"><p>{{ task.text }}</p><button class=\"delete-button\" v-on:click=\"deleteTask(task.id)\">×</button></li>\n    </ul>\n  </div>\n</template>\n\n<script>\nimport axios from 'axios';\n\nconst hostName = 'localhost:3000';\nconst path = '/api/tasks'\n\nexport default {\n  name: 'app',\n  data () {\n    return {\n      tasks: [],\n      newTask: '',\n    }\n  },\n  methods: {\n    getTasks: function() {\n      axios.get(`http://${hostName}${path}`)\n        .then((response) => {\n          this.tasks = response.data;\n        })\n        .catch(function(error) {\n          console.log(error);\n        });\n    },\n    postTask: function() {\n      axios.post(`http://${hostName}${path}`,\n          `task[text]=${this.newTask}`\n        )\n        .then((response) => {\n          this.getTasks();\n          this.newTask = '';\n        })\n        .catch(function(error) {\n          console.log(error);\n        });\n    },\n    deleteTask: function(id) {\n      axios.delete(`http://${hostName}${path}/${id}`)\n        .then((response) => {\n          this.getTasks();\n        })\n        .catch(function(error) {\n          console.log(error);\n        });\n    },\n  },\n  mounted: function() {\n    this.getTasks();\n  }\n}\n</script>\n\n<style lang=\"scss\">\n\n$list-item-height:   30px;\n\nhtml {\n  height: 100%;\n}\n\nbody {\n  height: 100%;\n  margin: 0;\n}\n\n#app {\n  font-family: 'Avenir', Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  color: #2c3e50;\n}\n\n#new-task-form {\n  width: 100%;\n  height: $list-item-height;\n}\n\n#task-list {\n  width: 100%;\n  list-style-type: none;\n  margin: 0;\n  padding: 0;\n}\n\n.task {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  width: 100%;\n  height: $list-item-height;\n  border-bottom: dashed 1px gray;\n\n  p {\n    margin: 0;\n    padding-left: 10px;\n  }\n}\n\n.delete-button {\n  width: 20px;\n  height: 20px;\n  margin: 0 8px;\n  background-color: gray;\n  color: white;\n  border: none;\n  border-radius: 50%;\n}\n\n</style>\n\n```\n\nこれで、完成です！UPDATE 機能はまだ実装していないので、実装してみると勉強になると思います。",
  "bodyHtml": "<h1>完成図</h1>\n<img src=\"/images/tasks.png\">\n<h1>コンセプト</h1>\n<p>フロントエンドとサーバサイドを完全に分ける。よって Rails の Webpacker を用いた Vue.js の使用はしない。</p>\n<h1>環境</h1>\n<p>Mac なので基本 homebrew でインストールしている。\n環境でこけるのが一番萎えるので慎重に。</p>\n<ul>\n<li>Mac OS X</li>\n<li>node 10.0.0</li>\n<li>npm 5.6.0</li>\n<li>Vue 2.9.3</li>\n<li>Rails 5.1.6</li>\n</ul>\n<h1>早速 Todo リストアプリ作ろう。</h1>\n<p>サーバーサイドとフロントエンドを分けるので、それぞれフォルダも分かれます。</p>\n<h2>まずはサーバサイドから</h2>\n<p>まずはサーバサイドから作ります。単純な CRUD 機能(Create Read Update Delete)が出来ることを目指しましょう。但し今回は Update は省略しています。</p>\n<p>APi モードで rails new します。</p>\n<pre><code>$ rails new server --api\n</code></pre>\n<p>Todo リストアプリを作るので、「task」というモデルを作り、タスクを保存したり削除したり出来るようにします。タスクが持つ column は string 型の「text」だけとします。DB のマイグレーションも忘れず行う。</p>\n<pre><code>$ rails generate model task text:string\n$ rails db:migrate\n</code></pre>\n<p>次にコントローラーを作ります。</p>\n<pre><code>$ rails g controller api::tasks\n</code></pre>\n<p>tasks_controller.rb の中身を以下のようにします。</p>\n<pre><code class=\"hljs\">class Api::TasksController &lt; ApplicationController\n  def index\n    @tasks = Task.all\n    render json: @tasks\n  end\n\n  def create\n    @task = Task.new(task_params)\n    if @task.save\n      render json: \"create new task.\\n\", status: 200\n    else\n      render json: \"fail to create.\\n\", status: 500\n    end\n  end\n\n  def destroy\n    @task = Task.find(params[:id])\n    @task.destroy\n    render json: \"destroy a task.\\n\"\n  end\n\n  private\n    def task_params\n      params.require(:task).permit(:text)\n    end\nend</code></pre><p>最後にルーティングを設定します。</p>\n<pre><code class=\"hljs\">Rails.application.routes.draw do\n  namespace :api, { format: 'json' } do\n    resources :tasks\n  end\nend</code></pre><p>これによりルーティングは以下のようになります。</p>\n<pre><code>$ rake routes\n       Prefix Verb   URI Pattern                   Controller#Action\n    api_tasks GET    /api/tasks(.:format)          api/tasks#index {:format=&gt;/json/}\n              POST   /api/tasks(.:format)          api/tasks#create {:format=&gt;/json/}\n new_api_task GET    /api/tasks/new(.:format)      api/tasks#new {:format=&gt;/json/}\nedit_api_task GET    /api/tasks/:id/edit(.:format) api/tasks#edit {:format=&gt;/json/}\n     api_task GET    /api/tasks/:id(.:format)      api/tasks#show {:format=&gt;/json/}\n              PATCH  /api/tasks/:id(.:format)      api/tasks#update {:format=&gt;/json/}\n              PUT    /api/tasks/:id(.:format)      api/tasks#update {:format=&gt;/json/}\n              DELETE /api/tasks/:id(.:format)      api/tasks#destroy {:format=&gt;/json/}\n</code></pre>\n<p>ターミナルから curl でテストしてみましょう。</p>\n<p>まず Rails サーバを立てます。</p>\n<pre><code>$ rails s\n</code></pre>\n<p>別ターミナルで、curl から rails サーバへリクエストを送ります。\nまずは新しいタスクを作ってみましょう。</p>\n<pre><code>$ curl http://localhost:3000/api/tasks -X POST -d 'task[text]=洗濯する'\ncreate new task.\n</code></pre>\n<p>次はそれを GET してみます。</p>\n<pre><code>$ curl http://localhost:3000/api/tasks\n[{&quot;id&quot;:1,&quot;text&quot;:&quot;洗濯する&quot;,&quot;created_at&quot;:&quot;2018-05-31T15:05:34.862Z&quot;,&quot;updated_at&quot;:&quot;2018-05-31T15:05:34.862Z&quot;}]\n</code></pre>\n<p>最後にそれを削除してみます。</p>\n<pre><code>$ curl http://localhost:3000/api/tasks/1 -X DELETE\ndestroy a task.\n</code></pre>\n<p>これでサーバ側は（だいたい）完成です。後からちょっと修正します。</p>\n<h2>次はフロントエンド</h2>\n<p>次はフロント側を Vue.js で作っていきます。\nvue-cli で雛形を作っていきましょう。今回はテンプレとして webpack-simple を使います。</p>\n<pre><code>$ vue init webpack-simple client\n$ cd client\n$ npm install\n$ npm run dev\n</code></pre>\n<p>まずは GET メソッドを送ってタスクを入手できるようにしましょう。\nsrc/app.js を以下のように変更します。</p>\n<pre><code class=\"hljs\">&lt;template&gt;\n  &lt;div id=\"app\"&gt;\n    &lt;ul id=\"task-list\"&gt;\n      &lt;li class=\"task\" v-for=\"task in tasks\"&gt;&lt;p&gt;{{ task.text }}&lt;/p&gt;&lt;/li&gt;\n    &lt;/ul&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nimport axios from 'axios';\n\nconst hostName = 'localhost:3000';\nconst path = '/api/tasks'\n\nexport default {\n  name: 'app',\n  data () {\n    return {\n      tasks: [],\n    }\n  },\n  methods: {\n    getTasks: function() {\n      axios.get(`http://${hostName}${path}`)\n        .then((response) =&gt; {\n          this.tasks = response.data;\n        })\n        .catch(function(error) {\n          console.log(error);\n        });\n    }\n  },\n  mounted: function() {\n    this.getTasks();\n  }\n}\n&lt;/script&gt;</code></pre><p>axios を使ってサーバにリクエストを送るので axios をインストールします。</p>\n<pre><code>npm install axios\n</code></pre>\n<p>axios で異なるオリジンに対してリクエストを送ると、クロスドメイン対応と pre-flight の対応が必要になります。OPTIONS メソッドで Pre-flight というリクエストが送られます。（あまり詳しくないので<a href=\"https://qiita.com/shimpeiws/items/0cd53ac9da3a7fd645b9\">ここを参考</a>にしました。これに対応するためにサーバ側を少し変更します。</p>\n<p>まずクロスドメインに対応するために、\nrack-cors モジュールをインストールし、</p>\n<pre><code>gem 'rack-cors'\n</code></pre>\n<p>config/initializers/cors.rb を以下にようにします。</p>\n<pre><code class=\"hljs\">Rails.application.config.middleware.insert_before 0, Rack::Cors do\n  allow do\n    origins '*'\n\n    resource '*',\n      headers: :any,\n      methods: [:get, :post, :put, :patch, :delete, :options, :head]\n  end\nend</code></pre><p>config/routes.rb に options リクエストが来た時のルーティングを追加します。</p>\n<pre><code class=\"hljs\">match '*path' =&gt; 'options_request#preflight', via: :options</code></pre><p>controller/options_request_controller.rb に以下を追加します。</p>\n<pre><code class=\"hljs\">class OptionsRequestController &lt; ApplicationController\n  ACCESS_CONTROL_ALLOW_METHODS = %w(GET OPTIONS).freeze\n  ACCESS_CONTROL_ALLOW_HEADERS = %w(Accept Origin Content-Type Authorization).freeze\n\n  def preflight\n    set_preflight_headers!\n    head :ok\n  end\n\n  private\n\n  def set_preflight_headers!\n    response.headers['Access-Control-Max-Age'] = ACCESS_CONTROL_MAX_AGE\n    response.headers['Access-Control-Allow-Headers'] = ACCESS_CONTROL_ALLOW_HEADERS.join(',')\n    response.headers['Access-Control-Allow-Methods'] = ACCESS_CONTROL_ALLOW_METHODS.join(',')\n  end\nend</code></pre><p>さて、これで task をサーバから GET できるようになったと思います。\nデータは予め curl で post して下さい。</p>\n<p>次にデータを POST するために form を追加しましょう。\nform の値を newTask というデータに bind したので、data に追加します。\nform に入力した値を axios でリクエストするメソッドを methods の中に追加します。</p>\n<p>まとめると以下のコードになります。</p>\n<pre><code class=\"hljs\">&lt;template&gt;\n  &lt;div id=\"app\"&gt;\n    &lt;form v-on:submit.prevent=\"postTask\"&gt;\n      &lt;input id=\"new-task-form\" type=\"text\" v-model=\"newTask\" placeholder=\"やりたいことは...\"&gt;\n    &lt;/form&gt;\n    &lt;ul id=\"task-list\"&gt;\n      &lt;li class=\"task\" v-for=\"task in tasks\"&gt;&lt;p&gt;{{ task.text }}&lt;/p&gt;&lt;/li&gt;\n    &lt;/ul&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nimport axios from 'axios';\n\nconst hostName = 'localhost:3000';\nconst path = '/api/tasks'\n\nexport default {\n  name: 'app',\n  data () {\n    return {\n      tasks: [],\n      newTask: '',\n    }\n  },\n  methods: {\n    getTasks: function() {\n      axios.get(`http://${hostName}${path}`)\n        .then((response) =&gt; {\n          this.tasks = response.data;\n        })\n        .catch(function(error) {\n          console.log(error);\n        });\n    },\n    postTask: function() {\n      axios.post(`http://${hostName}${path}`,\n          `task[text]=${this.newTask}`\n        )\n        .then((response) =&gt; {\n          this.getTasks();\n          this.newTask = '';\n        })\n        .catch(function(error) {\n          console.log(error);\n        });\n    },\n    deleteTask: function(id) {\n      axios.delete(`http://${hostName}${path}/${id}`)\n        .then((response) =&gt; {\n          this.getTasks();\n        })\n        .catch(function(error) {\n          console.log(error);\n        });\n    }\n  },\n  mounted: function() {\n    this.getTasks();\n  }\n}\n&lt;/script&gt;</code></pre><p>最後に task を DELETE するためのボタンを追加し、ボタンが押された時に axios で DELETE を送るメソッドを追加します。ついでに scss でスタイリングを行うと以下のようなコードになります。</p>\n<pre><code class=\"hljs\">&lt;template&gt;\n  &lt;div id=\"app\"&gt;\n    &lt;form v-on:submit.prevent=\"postTask\"&gt;\n      &lt;input id=\"new-task-form\" type=\"text\" v-model=\"newTask\" placeholder=\"やりたいことは...\"&gt;\n    &lt;/form&gt;\n    &lt;ul id=\"task-list\"&gt;\n      &lt;li class=\"task\" v-for=\"task in tasks\"&gt;&lt;p&gt;{{ task.text }}&lt;/p&gt;&lt;button class=\"delete-button\" v-on:click=\"deleteTask(task.id)\"&gt;×&lt;/button&gt;&lt;/li&gt;\n    &lt;/ul&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nimport axios from 'axios';\n\nconst hostName = 'localhost:3000';\nconst path = '/api/tasks'\n\nexport default {\n  name: 'app',\n  data () {\n    return {\n      tasks: [],\n      newTask: '',\n    }\n  },\n  methods: {\n    getTasks: function() {\n      axios.get(`http://${hostName}${path}`)\n        .then((response) =&gt; {\n          this.tasks = response.data;\n        })\n        .catch(function(error) {\n          console.log(error);\n        });\n    },\n    postTask: function() {\n      axios.post(`http://${hostName}${path}`,\n          `task[text]=${this.newTask}`\n        )\n        .then((response) =&gt; {\n          this.getTasks();\n          this.newTask = '';\n        })\n        .catch(function(error) {\n          console.log(error);\n        });\n    },\n    deleteTask: function(id) {\n      axios.delete(`http://${hostName}${path}/${id}`)\n        .then((response) =&gt; {\n          this.getTasks();\n        })\n        .catch(function(error) {\n          console.log(error);\n        });\n    },\n  },\n  mounted: function() {\n    this.getTasks();\n  }\n}\n&lt;/script&gt;\n\n&lt;style lang=\"scss\"&gt;\n\n$list-item-height:   30px;\n\nhtml {\n  height: 100%;\n}\n\nbody {\n  height: 100%;\n  margin: 0;\n}\n\n#app {\n  font-family: 'Avenir', Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  color: #2c3e50;\n}\n\n#new-task-form {\n  width: 100%;\n  height: $list-item-height;\n}\n\n#task-list {\n  width: 100%;\n  list-style-type: none;\n  margin: 0;\n  padding: 0;\n}\n\n.task {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  width: 100%;\n  height: $list-item-height;\n  border-bottom: dashed 1px gray;\n\n  p {\n    margin: 0;\n    padding-left: 10px;\n  }\n}\n\n.delete-button {\n  width: 20px;\n  height: 20px;\n  margin: 0 8px;\n  background-color: gray;\n  color: white;\n  border: none;\n  border-radius: 50%;\n}\n\n&lt;/style&gt;</code></pre><p>これで、完成です！UPDATE 機能はまだ実装していないので、実装してみると勉強になると思います。</p>\n",
  "preview": "完成図\n\nコンセプト\n\nフロントエンドとサーバサイドを完全に分ける。よって Rails の Webpacker を用いた",
  "dir": "content/json",
  "base": "2018-05-31-vue-rails-todo.json",
  "ext": ".json",
  "sourceBase": "2018-05-31-vue-rails-todo.md",
  "sourceExt": ".md"
}